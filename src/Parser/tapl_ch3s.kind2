Const (t: Term) : Data.List Term
Const (Term.z) = [Term.z]
Const (Term.s pred) = Const pred
Const (Term.p succ) = Const succ
Const (Term.isz zt) = Const zt
Const (Term.true) = [Term.true]
Const (Term.false) = [Term.false]
Const (Term.if cond then else) = (Data.List.concat (Const cond) (Data.List.concat (Const then) (Const else)))

// Definition: The size of a term t, written size(t), is defined as follows:
// size(true) = 1
// size(false) = 1
// size(0) = 1
// size(succ t1) = size(t1) + 1
// size(pred t1) = size(t1) + 1
// size(iszero t1) = size(t1) + 1
// size(if t1 then t2 else t3) = size(t1) + size(t2) + size(t3) + 1

Size (t: Term) : Data.Nat
Size (Term.z) = 1n
Size (Term.s pred) = (Data.Nat.succ (Size pred))
Size (Term.p succ) = (Data.Nat.succ (Size succ))
Size (Term.isz zt) = (Data.Nat.succ (Size zt))
Size (Term.true) = 1n
Size (Term.false) = 1n
Size (Term.if cond then else) = (Data.Nat.succ (Data.Nat.add (Size cond) (Data.Nat.add (Size then) (Size else)))) 

// 3.3.3 Lemma: The number of distinct constants in a term t is no greater than the
// size of t (i.e., |Consts(t)| ≤ size(t)). 

type Lte (n: Data.Nat) ~ (m: Data.Nat) {
	n : Lte n n
	s <m: Data.Nat> (pred: (Lte n m)) : (Lte n (Data.Nat.succ m)) 
}

Const_num (t: Term) : Data.Nat
Const_num (Term.z) = 1n
Const_num (Term.s pred) = Const_num pred
Const_num (Term.p succ) = Const_num succ
Const_num (Term.isz zt) = Const_num zt
Const_num (Term.true) = 1n
Const_num (Term.false) = 1n
Const_num (Term.if cond then else) = (Data.Nat.add (Const_num cond) (Data.Nat.add (Const_num then) (Const_num else)))

App_length <x> (l1: Data.List x) (l2: Data.List x) : (Prop.Equal Data.Nat (Data.List.length (Data.List.concat l1 l2)) (Data.Nat.add (Data.List.length l1) (Data.List.length l2)))

// Length_const
Length_const (t: Term) : Prop.Equal (Data.List.length (Const t)) (Const_num t)
Length_const (Term.z) = Prop.Equal.refl
Length_const (Term.true) = Prop.Equal.refl
Length_const (Term.false) = Prop.Equal.refl
Length_const (Term.s pred) = Length_const pred 
Length_const (Term.p succ) = Length_const succ 
Length_const (Term.isz zt) = Length_const zt
Length_const (Term.if cond then else) = 	
	let ind1 = Length_const cond 
	let ind2 = Length_const then 
	let ind3 = Length_const else
	let aux = App_length (Const cond) (Data.List.concat (Const then) (Const else))
	let auy = App_length (Const then) (Const else)
	let rrt = Prop.Equal.rewrite auy (x => ((Prop.Equal _ (Data.Nat.add (Data.List.length _ (Const cond)) (x))))) aux
	let rru = Prop.Equal.rewrite ind1 (x => ((Prop.Equal _ (Data.Nat.add x _)))) rrt
	let rrv = Prop.Equal.rewrite ind2 (x => ((Prop.Equal _ (Data.Nat.add _ (Data.Nat.add (x) _))))) rru
	let rrw = Prop.Equal.rewrite ind3 (x => ((Prop.Equal _ (Data.Nat.add _ (Data.Nat.add _ (x)))))) rrv
	rrw

Lemma (t: Term) : Type
Lemma t =  (Lte (Const_num t) (Size t))

Lemma333 (t: Term) : Lemma t
Lemma333 (Term.z) = Lte.n
Lemma333 (Term.true) = Lte.n
Lemma333 (Term.false) = Lte.n
Lemma333 (Term.s pred) = 
	let ind = Lemma333 pred 
  let aux = Lte.s ind 
	aux
Lemma333 (Term.p succ) = 
	let ind = Lemma333 succ 
  let aux = Lte.s ind 
	aux
Lemma333 (Term.isz zt) = 
	let ind = Lemma333 zt
  let aux = Lte.s ind 
	aux
Lemma333 (Term.if cond then else) = 
	let ind1 = Lemma333 cond
	let ind2 = Lemma333 then
	let ind3 = Lemma333 else
	let auxa = Lte_ben (Data.Nat.add (Const_num cond) (Data.Nat.add (Const_num then) (Const_num else)))
	let rrt = Lte.rewrite ind1 (x => (Lte _ (Data.Nat.add x _))) auxa
	let rru = Lte.rewrite ind2 (x => (Lte _ (Data.Nat.add _ (Data.Nat.add x _)))) rrt
	let rrv = Lte.rewrite ind3 (x => (Lte _ (Data.Nat.add _ (Data.Nat.add _ x)))) rru
	Lte.s rrv

Lte.rewrite <a: Data.Nat> <b: Data.Nat> (e: Lte a b) -(p: Data.Nat -> Type) (x: p a) : p b
Lte.rewrite a b (Lte.n k) p x = x :: p k
// Lte.rewrite a b (Lte.s c d k) p x = 
// 	let e0 = Prop.Equal.refl :: Prop.Equal b (Data.Nat.succ d)
// 	let ind = Lte.rewrite k p x 
// 	?

// O_le_n (n: Data.Nat) : Lte Data.Nat.zero n
// O_le_n Data.Nat.zero = Lte.n 
// O_le_n (Data.Nat.succ n) = (Lte.s (O_le_n n))

// Le_one_succ_n (n: Data.Nat) : Lte 1n (Data.Nat.succ n)
// Le_one_succ_n Data.Nat.zero = Lte.n
// Le_one_succ_n (Data.Nat.succ n) = Lte.s (Le_one_succ_n n)

// N_le_m_sn_le_sm (n: Data.Nat) (m: Data.Nat) (l: Lte n m) : Lte (Data.Nat.succ n) (Data.Nat.succ m)
// N_le_m_sn_le_sm Data.Nat.zero Data.Nat.zero (Lte.n) = Lte.n
// N_le_m_sn_le_sm (Data.Nat.succ n.pred) Data.Nat.zero (Lte.n) = Data.Empty.absurd _
// N_le_m_sn_le_sm Data.Nat.zero (Data.Nat.succ m.pred) l = Lte.s (Le_one_succ_n m.pred)
// N_le_m_sn_le_sm (Data.Nat.succ n.pred) (Data.Nat.succ m.pred) (Lte.s p) = Lte.s (N_le_m_sn_le_sm (Data.Nat.succ n.pred) m.pred p)

Lte_ben (n: Data.Nat) : (Lte n n)
Lte_ben n = Lte.n

// Lte_size (n: Data.Nat) (m: Data.Nat) (e: Prop.Equal n m) : (Lte n m)
// Lte_size Data.Nat.zero Data.Nat.zero e = Lte.n
// Lte_size (Data.Nat.succ n) Data.Nat.zero e = Data.Empty.absurd _
// Lte_size Data.Nat.zero (Data.Nat.succ m) e = Lte.s (O_le_n m)
// Lte_size (Data.Nat.succ n) (Data.Nat.succ m) e = 
// 	let prd = Prop.Equal.apply (x => Data.Nat.pred x) e
// 	let ind = Lte_size n m prd
// 	let aux = N_le_m_sn_le_sm n m ind
// 	aux

// Lte_S (n: Data.Nat) (m: Data.Nat) (l: Lte n m) : (Lte n (Data.Nat.succ m))
// Lte_S n m l = Lte.s l

// That is, the size of t is the number of nodes in its abstract syntax tree. Simi-
// larly, the depth of a term t, written depth(t), is defined as follows:
// depth(true) = 1
// depth(false) = 1
// depth(0) = 1
// depth(succ t1) = depth(t1) + 1
// depth(pred t1) = depth(t1) + 1
// depth(iszero t1) = depth(t1) + 1
// depth(if t1 then t2 else t3) = max(depth(t1), depth(t2), depth(t3)) + 1
// Equivalently, depth(t) is the smallest i such that t ∈ Si according to Definition 3.2.3.

Depth (t: Term) : Data.Nat
Depth (Term.z) = 1n
Depth (Term.s pred) = (Data.Nat.succ (Depth pred))
Depth (Term.p succ) = (Data.Nat.succ (Depth succ))
Depth (Term.isz zt) = (Data.Nat.succ (Depth zt))
Depth (Term.true) = 1n
Depth (Term.false) = 1n
Depth (Term.if cond then else) = (Data.Nat.succ (Data.Nat.max (Depth cond) (Data.Nat.max (Depth then) (Depth else))))


Evaluation (t: Term) : Term
Evaluation (Term.if Term.true then else) = then // E-iftrue
Evaluation (Term.if Term.false then else) = else // E-ifflase
Evaluation (Term.if cond then else) = Term.if (Evaluation cond) then else // E-if
Evaluation (Term.s pred) = Term.s (Evaluation pred) // E-Succ
Evaluation (Term.p z) = z // (E-PredZero)
Evaluation (Term.p (Term.s succpred)) = succpred // E-PredSucc
Evaluation (Term.p succ) = Term.p (Evaluation succ) // E-Pred
Evaluation (Term.isz z) = Term.true // (E-IszeroZero)
Evaluation (Term.isz (Term.s ztpred)) = Term.false // E-IszeroSucc
Evaluation (Term.isz zt) = Term.isz (Evaluation zt) // E-IsZero)
Evaluation t =  t // z, true, false

// 3.5.4 Theorem [Determinacy of one-step evaluation]: If t -→ t′ and t -→ t′′, then t′ = t′′
//One-step evaluation relation
#derive[match]
type Step ~(then: Term) (else: Term) {
	E_IfTrue <then: Term> <else: Term> : Step (Term.if Term.true then else) then
	E_IfFalse <then: Term> <else: Term> : Step (Term.if Term.false then else) else
	E_If <cond1: Term> <cond2: Term> <then: Term> <else: Term> (s: Step cond1 cond2) : Step (Term.if cond1 then else) (Term.if cond2 then else)
}
//theorem: Determinacy of one-step evaluation
Theorem_doose (t1: Term) (t2: Term) (t3: Term) (s1: Step t1 t2) (s2: Step t1 t3) : Prop.Equal t2 t3
Theorem_doose t1 t2 t3 (Step.E_IfTrue t4 t5) (Step.E_IfTrue t6 t7) = 
	let e0 = Prop.Equal.refl :: Prop.Equal t4 t2
	let e1 = Prop.Equal.refl :: Prop.Equal t6 t3
	let e2 = Prop.Equal.refl :: Prop.Equal t1 (Term.if Term.true t6 t7)
	let e3 = Prop.Equal.refl :: Prop.Equal t1 (Term.if Term.true t4 t5)
	let chn = Prop.Equal.chain (Prop.Equal.mirror e2) e3
	let app = Prop.Equal.apply (x => Evaluation x) chn
	let rrt = Prop.Equal.rewrite e0 (x => (Prop.Equal Term t6 x)) app
	let rru = Prop.Equal.rewrite e1 (x => (Prop.Equal Term x t2)) rrt
	let mir = (Prop.Equal.mirror rru)
	mir
Theorem_doose t1 t2 t3 (Step.E_IfFalse t4 t5) (Step.E_IfFalse t6 t7) = 
	let e0 = Prop.Equal.refl :: Prop.Equal t5 t2
	let e1 = Prop.Equal.refl :: Prop.Equal t7 t3
	let e2 = Prop.Equal.refl :: Prop.Equal t1 (Term.if Term.false t6 t7)
	let e3 = Prop.Equal.refl :: Prop.Equal t1 (Term.if Term.false t4 t5)
	let chn = Prop.Equal.chain (Prop.Equal.mirror e2) e3
	let app = Prop.Equal.apply (x => Evaluation x) chn
	let rrt = Prop.Equal.rewrite e0 (x => (Prop.Equal Term t7 x)) app
	let rru = Prop.Equal.rewrite e1 (x => (Prop.Equal Term x t2)) rrt
	let mir = (Prop.Equal.mirror rru)
	mir
Theorem_doose (Term.if t1 t21 t31) t2 t3 (Step.E_If t12 t2_ t4_ t6_ step1) (Step.E_If t13 t3_ t5_ t7_ step2) =
	let e0 = Prop.Equal.refl :: Prop.Equal Term t2 (Term.if t2_ t4_ t6_) 
	let e1 = Prop.Equal.refl :: Prop.Equal Term t3 (Term.if t3_ t5_ t7_)  
	let e3 = Prop.Equal.refl :: Prop.Equal Term t4_ t21 
	let e4 = Prop.Equal.refl :: Prop.Equal Term t6_ t31 
	let e6 = Prop.Equal.refl :: Prop.Equal Term t5_ t21 
	let e7 = Prop.Equal.refl :: Prop.Equal Term t7_ t31  
	let ch1 = Prop.Equal.chain e6 (Prop.Equal.mirror e3) 
	let ch2 = Prop.Equal.chain e7 (Prop.Equal.mirror e4)
	let mir = (Prop.Equal.mirror e1) 
	let rrt = Prop.Equal.rewrite ch1 (x => (Prop.Equal (Term.if t3_ x t7_) t3)) mir
	let rru = Prop.Equal.rewrite ch2 (x => (Prop.Equal (Term.if t3_ t4_ x) t3)) rrt
	let ind = Theorem_doose t12 t2_ t3_ step1 step2
	let rrv = Prop.Equal.rewrite (Prop.Equal.mirror ind) (x => (Prop.Equal (Term.if x t4_ t6_) t3)) rru
	let ch2 = Prop.Equal.chain e0 rrv
	ch2